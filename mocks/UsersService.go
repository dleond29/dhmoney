// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "gitlab.com/leorodriguez/grupo-04/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// UsersService is an autogenerated mock type for the UsersService type
type UsersService struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: ctx, email
func (_m *UsersService) ForgotPassword(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Login provides a mock function with given fields: ctx, rq
func (_m *UsersService) Login(ctx context.Context, rq domain.LoginRequest) (domain.LoginResponse, error) {
	ret := _m.Called(ctx, rq)

	var r0 domain.LoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, domain.LoginRequest) domain.LoginResponse); ok {
		r0 = rf(ctx, rq)
	} else {
		r0 = ret.Get(0).(domain.LoginResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.LoginRequest) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, token
func (_m *UsersService) Logout(ctx context.Context, token string) error {
	ret := _m.Called(ctx, token)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, rq
func (_m *UsersService) Register(ctx context.Context, rq domain.RegisterRequest) (domain.UserDto, error) {
	ret := _m.Called(ctx, rq)

	var r0 domain.UserDto
	if rf, ok := ret.Get(0).(func(context.Context, domain.RegisterRequest) domain.UserDto); ok {
		r0 = rf(ctx, rq)
	} else {
		r0 = ret.Get(0).(domain.UserDto)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.RegisterRequest) error); ok {
		r1 = rf(ctx, rq)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// getNewAlias provides a mock function with given fields: ctx
func (_m *UsersService) getNewAlias(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getNewCVU provides a mock function with given fields: ctx
func (_m *UsersService) getNewCVU(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewUsersService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsersService creates a new instance of UsersService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsersService(t mockConstructorTestingTNewUsersService) *UsersService {
	mock := &UsersService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
